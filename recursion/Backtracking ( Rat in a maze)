// backtracking  ( RAT IN MAZE PROBLEM) 

// don't try deeply everything 
// algorithmic technique for solving recursive problems by trying to build every possible soltion

#include<iostream>
using namespace std;
// n is the 2d matrix

bool isSafe(int** arr, int x, int y , int n)
{
 if(x<n && y<n && arr[x][y]==1)
 {
     return true;
 }

 return false;

}

bool ratinMaze(int** arr , int x, int y ,int n , int** solArr)
 {
    if(x==n-1 & y==n-1)
    {
        solArr[x][y]=1;
        return true;
    }

    if(isSafe(arr,x,y,n))
     {
         solArr[x][y]=1;
         if(ratinMaze(arr, x+1 , y ,n, solArr))
         {
             return true;
         }

         if(ratinMaze(arr, x  , y+1 , n , solArr))
         {
             return true;
         }

         solArr[x][y]=0;  // backtracking
         return false;
     }
     return false;
 }  


int main()
{

    int n;
    cin>>n;
    int** arr= new int*[n];
    for(int i=0;i<n;i++)
    {
        arr[i]=new int[n];
    }

    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            cin>>arr[i][j];
        }
    }
    int** solarr= new int*[n];
    for(int i=0;i<n;i++)
    {
        solarr[i]=new int[n];
        for(int j=0;j<n;j++)
        {
            solarr[i][j]=0;
        }
    }

    if(ratinMaze(arr,0,0,n, solarr))
    {
        for(int i=0; i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                cout<< solarr[i][j]<<" ";
            } cout<<endl;
        }
    }


  return 0;
}
